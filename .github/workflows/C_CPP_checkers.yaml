name: üîß C/C++ Workflow

on:
  push:
    paths:
      - 'C/**'
      - 'CPP/**'

jobs:
  cpp_checks:
    name: üíª C/C++ Checks
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v2

      - name: üõ†Ô∏è Install dependencies
        run: sudo apt-get install -y build-essential cppcheck

      - name: üèóÔ∏è Build C files
        run: |
          mkdir -p build
          for file in C/*.c; do
            gcc -c "$file" -o "build/$(basename "$file" .c).o"
          done
          gcc build/*.o -o build/c_program

      - name: üèóÔ∏è Build C++ files
        run: |
          mkdir -p build
          for file in CPP/*.cpp; do
            g++ -c "$file" -o "build/$(basename "$file" .cpp).o"
          done
          g++ build/*.o -o build/cpp_program

      - name: ‚úÖ Run C tests
        run: |
          if [ -f build/c_program ]; then
            ./build/c_program
          fi
        continue-on-error: false

      - name: ‚úÖ Run C++ tests
        run: |
          if [ -f build/cpp_program ]; then
            ./build/cpp_program
          fi
        continue-on-error: false

      - name: üö¶ Static analysis with cppcheck
        id: cppcheck
        run: |
          cppcheck --enable=all --inconclusive --xml C CPP 2> cppcheck.xml
          cat cppcheck.xml
          echo "::set-output name=cppcheck_results::$(cat cppcheck.xml)"
        continue-on-error: true

      - name: üîç Annotate cppcheck Issues
        if: failure()
        uses: actions/github-script@v3
        with:
          script: |
            const { issues } = require('@actions/github');

            const output = `${{ steps.cppcheck.outputs.cppcheck_results }}`;
            if (output) {
              const annotations = [];
              const parser = new DOMParser();
              const xmlDoc = parser.parseFromString(output, "application/xml");
              const errors = xmlDoc.getElementsByTagName("error");

              for (let i = 0; i < errors.length; i++) {
                const error = errors[i];
                const file = error.getAttribute("file");
                const line = error.getAttribute("line");
                const message = error.getAttribute("msg");

                annotations.push({
                  path: file,
                  start_line: parseInt(line),
                  end_line: parseInt(line),
                  annotation_level: 'failure',
                  message: message,
                });
              }

              annotations.forEach(annotation => {
                github.checks.create({
                  ...context.repo,
                  name: 'cppcheck Analysis',
                  head_sha: context.sha,
                  conclusion: 'failure',
                  output: {
                    title: 'cppcheck Report',
                    summary: 'cppcheck found issues in your code.',
                    annotations: [annotation],
                  },
                });
              });
            }

      - name: üìã Display Results Summary
        if: always()
        run: |
          cppcheck_summary="${{ steps.cppcheck.outputs.cppcheck_results }}"
          
          if [ -n "$cppcheck_summary" ]; then
            echo "üî¥ FAIL: cppcheck issues found"
            echo "$cppcheck_summary"
          else
            echo "‚úÖ PASS: No cppcheck issues found"
          fi
