name: 🐍 Python Workflow

on:
  push:
    paths:
      - 'python/**'

jobs:
  python_checks:
    name: 💻 Python Checks
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v2

      - name: 🐍 Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: 📦 Install dependencies
        run: |
          pip install flake8 mypy black
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: 🚦 Lint Python code
        id: lint
        run: |
          flake8 python --count --statistics --exit-zero
          flake8 python --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: 📝 Type check Python code
        id: typecheck
        run: |
          mypy python

      - name: 🖌️ Format Python code with Black
        id: format
        run: |
          black python --check --diff

      - name: 🔍 Annotate Linting Issues
        if: failure()
        uses: actions/github-script@v3
        with:
          script: |
            const { issues } = require('@actions/github');

            const output = `${{ steps.lint.outputs.flake8_summary }}`;
            if (output) {
              const annotations = output.split('\n').map(line => {
                const [file, line_number, column_number, message] = line.split(':');
                return {
                  path: file.trim(),
                  start_line: parseInt(line_number),
                  end_line: parseInt(line_number),
                  annotation_level: 'failure',
                  message: message.trim(),
                };
              });

              annotations.forEach(annotation => {
                github.checks.create({
                  ...context.repo,
                  name: 'Flake8 Lint',
                  head_sha: context.sha,
                  conclusion: 'failure',
                  output: {
                    title: 'Flake8 Lint Report',
                    summary: 'Flake8 found issues in your code.',
                    annotations: [annotation],
                  },
                });
              });
            }

      - name: 🔍 Annotate Type Checking Issues
        if: failure()
        uses: actions/github-script@v3
        with:
          script: |
            const { issues } = require('@actions/github');

            const output = `${{ steps.typecheck.outputs.mypy_summary }}`;
            if (output) {
              const annotations = output.split('\n').map(line => {
                const [file, line_number, column_number, message] = line.split(':');
                return {
                  path: file.trim(),
                  start_line: parseInt(line_number),
                  end_line: parseInt(line_number),
                  annotation_level: 'failure',
                  message: message.trim(),
                };
              });

              annotations.forEach(annotation => {
                github.checks.create({
                  ...context.repo,
                  name: 'Mypy Type Check',
                  head_sha: context.sha,
                  conclusion: 'failure',
                  output: {
                    title: 'Mypy Type Check Report',
                    summary: 'Mypy found issues in your code.',
                    annotations: [annotation],
                  },
                });
              });
            }

      - name: 📋 Display Results Summary
        if: always()
        run: |
          lint_summary="${{ steps.lint.outputs.flake8_summary }}"
          typecheck_summary="${{ steps.typecheck.outputs.mypy_summary }}"
          format_summary="${{ steps.format.outputs.black_summary }}"
          
          if [ -n "$lint_summary" ]; then
            echo "🔴 FAIL: Linting issues found"
            echo "$lint_summary"
          else
            echo "✅ PASS: No linting issues found"
          fi

          if [ -n "$typecheck_summary" ]; then
            echo "🔴 FAIL: Type checking issues found"
            echo "$typecheck_summary"
          else
            echo "✅ PASS: No type checking issues found"
          fi

          if [ -n "$format_summary" ]; then
            echo "🔴 FAIL: Formatting issues found"
            echo "$format_summary"
          else
            echo "✅ PASS: No formatting issues found"
          fi
